name: CI/CD - Node + Docker + Render

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  IMAGE_NAME: just4hoursleep/hello-docker

jobs:
  build_test_push_deploy:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node para instalar dependencias y correr tests
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Run tests
        run: npm test

      # Docker build & push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Compute tags
        id: meta
        run: |
          SHA_TAG=sha-${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=latest" >> $GITHUB_OUTPUT

      - name: Build & Push image (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_tag }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      # Deploy con Deploy Hook (simple)
      - name: Deploy to Render (Git-backed service)
        shell: bash
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          set -euo pipefail
          if [ -z "${RENDER_DEPLOY_HOOK:-}" ]; then
            echo "RENDER_DEPLOY_HOOK no está definido. Omitiendo deploy."
            exit 0
          fi
          # Para servicios conectados a Git, basta un POST/GET al hook:
          # Render hará el build desde el repo/branch configurado
          curl -fsS -X POST "${RENDER_DEPLOY_HOOK}"

      # Deploy con API (opcional)
      - name: Deploy to Render via API (imageUrl)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${RENDER_API_KEY:-}" ] || [ -z "${RENDER_SERVICE_ID:-}" ]; then
            echo "RENDER_API_KEY o RENDER_SERVICE_ID no están definidos. Omitiendo deploy por API."
            exit 0
          fi

          IMG_URL="docker.io/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_tag }}"
          echo "Render API deploy imageUrl=${IMG_URL}"

          curl -fsS -X POST \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "{\"clearCache\":false, \"imageUrl\":\"${IMG_URL}\"}"
